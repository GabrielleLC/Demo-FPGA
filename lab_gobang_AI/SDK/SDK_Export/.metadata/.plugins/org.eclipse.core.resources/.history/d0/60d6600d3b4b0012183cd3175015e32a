#include "xparameters.h"
#include "xgpio.h"
#include "xutil.h"
#include "vga_ip.h"
#include "xps2.h"
#include <xtmrctr.h>
#include <xintc_l.h>

//====================================================

#define PLAYER1 0
#define PLAYER2 1
#define EMPTY   2
#define CURSOR  3

int board_state[15][15];
int turn = 0;
int status = 1;
int one_second_flag = 0;
int thirty_second_flag = 0;
int win_flag = 0;
volatile int time = 0, count = 0;
volatile u32 ssBuf;
static const u32 rgfsNumMap[10] = {0x000000C0, 0x000000F9, 0x000000A4,
								0x000000B0, 0x00000099, 0x00000092,
								0x00000082, 0x000000F8, 0x00000080,
								0x00000090};

void DrawBoard (void)
{
	int i,j,x_cor,y_cor,type,vga_input;
	for (i=0; i<15; i++) {
		for (j=0; j<15; j++) {
			x_cor=i<<24;
			y_cor=j<<16;
			type=EMPTY;
			vga_input=x_cor+y_cor+type;
		    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
		}
    }
}

void DrawChess (int x_pos, int y_pos, int turn)
{
	int x_cor,y_cor,type,vga_input;
	type=turn;
	x_cor=x_pos<<24;
	y_cor=y_pos<<16;
	vga_input=x_cor+y_cor+type;
	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
}

void EraseCursor(int x_pos, int y_pos)
{
	if (board_state[x_pos][y_pos]==0) {
		DrawChess(x_pos,y_pos,0);
	}
	else if (board_state[x_pos][y_pos]==1) {
		DrawChess(x_pos,y_pos,1);
	}
	else {
		DrawChess(x_pos,y_pos,2);
	}
}

void DrawNumber(int number, int x_pos, int y_pos, int turn)
{
	int vga_input;

	switch (number) {
	    case 0: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
                VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
                VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
                VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                vga_input=(x_pos<<24)+((y_pos+1)<<16)+(1<<8)+turn;
                VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
                VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
                VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
                VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                vga_input=(x_pos<<24)+((y_pos+3)<<16)+(1<<8)+turn;
       	        VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
       	        vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
       	        VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
       	        vga_input=(x_pos<<24)+((y_pos+4)<<16)+(1<<8)+turn;
                VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
       	        vga_input=((x_pos+1)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
       	        VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
       	        vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
       	        VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                break;
	    case 1: vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
                break;
	    case 2: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=((x_pos+1)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=(x_pos<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=(x_pos<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=((x_pos+1)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	    	    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	    	    break;
	    case 3: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=(x_pos<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+1)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            break;
	    case 4: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            break;
	    case 5: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=(x_pos<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+1)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            break;
	    case 6: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=(x_pos<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+1)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            break;
	    case 7: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            break;
	    case 8: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=(x_pos<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+1)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            break;
	    case 9: vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+1)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=(x_pos<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	            VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+1)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	           	vga_input=((x_pos+2)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
	           	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	            break;
	}

}

void DrawTime(int time, int turn)
{
	int num1, num2;

	num1=time/10;
	num2=time%10;
	DrawNumber(num1, 2, 1, turn);
	DrawNumber(num2, 6, 1, turn);
}

void DrawWinning(int x_pos, int y_pos, int turn)
{
	int vga_input;

	vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	vga_input=(x_pos<<24)+((y_pos-1)<<16)+(1<<8)+turn;
	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	vga_input=((x_pos+1)<<24)+((y_pos-2)<<16)+(1<<8)+turn;
	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	vga_input=((x_pos+2)<<24)+((y_pos-1)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);

    vga_input=((x_pos+5)<<24)+(y_pos<<16)+(1<<8)+turn;
	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	vga_input=((x_pos+5)<<24)+((y_pos-1)<<16)+(1<<8)+turn;
	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	vga_input=((x_pos+6)<<24)+((y_pos-2)<<16)+(1<<8)+turn;
	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
	vga_input=((x_pos+7)<<24)+((y_pos-1)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+7)<<24)+(y_pos<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);

    vga_input=((x_pos+2)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+3)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+4)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+5)<<24)+((y_pos+3)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);

}

void DrawStatus(int x_pos, int y_pos, int turn, int status)
{
	int vga_input;

    vga_input=(x_pos<<24)+(y_pos<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+1)<<24)+(y_pos<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+2)<<24)+(y_pos<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=(x_pos<<24)+((y_pos+1)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+2)<<24)+((y_pos+1)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=(x_pos<<24)+((y_pos+2)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+1)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+2)<<24)+((y_pos+2)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=(x_pos<<24)+((y_pos+3)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=(x_pos<<24)+((y_pos+4)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);

    vga_input=((x_pos+3)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+3)<<24)+((y_pos+5)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+4)<<24)+((y_pos+6)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+5)<<24)+((y_pos+5)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    vga_input=((x_pos+5)<<24)+((y_pos+4)<<16)+(1<<8)+turn;
    VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);

    if (status==0) {
    	vga_input=((x_pos+7)<<24)+((y_pos+5)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+8)<<24)+((y_pos+5)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+9)<<24)+((y_pos+5)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+7)<<24)+((y_pos+6)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+9)<<24)+((y_pos+6)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+7)<<24)+((y_pos+7)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+8)<<24)+((y_pos+7)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+9)<<24)+((y_pos+7)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+7)<<24)+((y_pos+8)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+7)<<24)+((y_pos+9)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    }
    else if(status==1) {
    	vga_input=((x_pos+7)<<24)+((y_pos+6)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+8)<<24)+((y_pos+6)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+9)<<24)+((y_pos+6)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+7)<<24)+((y_pos+7)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+7)<<24)+((y_pos+8)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+7)<<24)+((y_pos+9)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+8)<<24)+((y_pos+9)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);
    	vga_input=((x_pos+9)<<24)+((y_pos+9)<<16)+(1<<8)+turn;
    	VGA_IP_mWriteReg(XPAR_VGA_IP_0_BASEADDR, 0, vga_input);

    }
}

int CheckWin(int x_pos, int y_pos, int turn)
{
	int i,j,count;
	count=1;
	for (i=x_pos+1, j=y_pos; i<15; i++) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	for (i=x_pos-1, j=y_pos; i>=0; i--) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
    }
	if (count==5)
		return 1;

	count=1;
	for (i=x_pos, j=y_pos+1; j<15; j++) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	for (i=x_pos, j=y_pos-1; j>=0; j--) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	if (count==5)
		return 1;

	count=1;
	for (i=x_pos+1,j=y_pos+1; i<15 && j<15; i++,j++) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	for (i=x_pos-1,j=y_pos-1; i>=0 && j>=0; i--,j--) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	if (count==5)
		return 1;

	count=1;
    for (i=x_pos+1,j=y_pos-1; i<15 && j>=0; i++,j--) {
	 	if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	for (i=x_pos-1,j=y_pos+1; i>=0 && j<15; i--,j++) {
		if (board_state[i][j]==turn)
			count++;
		else
			break;
	}
	if (count==5)
		return 1;

	return 0;
}

void timer_int_handler(void * baseaddr_p) {
	unsigned int csr;
	int num;
    unsigned int MskAnodes;

	csr = XTmrCtr_GetControlStatusReg(XPAR_XPS_TIMER_0_BASEADDR, 0);
    if (csr & XTC_CSR_INT_OCCURED_MASK && win_flag==0) {
	    count++;
	    if (count%2==0) {
	    	MskAnodes=0x00000D00;
	    	num=(30-time)/10;
	    }
	    else {
	    	MskAnodes=0x00000E00;
	    	num=(30-time)%10;
	    }
    	ssBuf = MskAnodes | rgfsNumMap[num];
        Xil_Out32(XPAR_SEVSEG_DISP_12BITS_BASEADDR, ssBuf);
    }
    if (count==200) {
    	count=0;
    	time++;
    	one_second_flag = 1;
    }
    if (time>30) {
    	time=0;
    	if (turn==PLAYER1)
    		turn=PLAYER2;
    	else
    	    turn=PLAYER1;
    	thirty_second_flag = 1;
    	xil_printf("\r\nPlayer %x's turn!\r\n", turn+1);
    }
    XTmrCtr_SetControlStatusReg(XPAR_XPS_TIMER_0_BASEADDR, 0, csr);
}

void InitializeGame(int x_cur, int y_cur)
{
	int i,j;
	for (i=0; i<15; i++) {
		for (j=0; j<15; j++) {
		    board_state[i][j]=EMPTY;
		}
	}
	count=0;
	time=0;
	turn=PLAYER1;
	status=1;
	win_flag=0;
	DrawBoard();
	DrawChess(x_cur, y_cur, CURSOR);
	DrawTime(88, EMPTY);
	DrawTime(30, turn);
	DrawWinning(1, 13, EMPTY);
	DrawStatus(0, 20, PLAYER2, status);
	xil_printf("\r\nGame Start!\r\n");

}

int main (void)
{
   XGpio dip;
   int dip_check;

   static XPs2 Ps2Inst;
   XPs2_Config *ConfigPtr;
   u32 StatusReg;
   u32 BytesReceived;
   u8 RxBuffer;
   int key_count=0;
   int vga_input;

   int i,j;
   int x_cur=7,y_cur=7;

   XGpio_Initialize(&dip, XPAR_DIP_SWITCHES_8BITS_DEVICE_ID);
   XGpio_SetDataDirection(&dip, 1, 0xffffffff);

   ConfigPtr = XPs2_LookupConfig(XPAR_XPS_PS2_0_0_DEVICE_ID);
   XPs2_CfgInitialize(&Ps2Inst, ConfigPtr, ConfigPtr->BaseAddress);

   XIntc_RegisterHandler(XPAR_XPS_INTC_0_BASEADDR,
		                 XPAR_XPS_INTC_0_XPS_TIMER_0_INTERRUPT_INTR,
                         (XInterruptHandler) timer_int_handler,
                         (void *)XPAR_XPS_TIMER_0_BASEADDR);

   XIntc_MasterEnable(XPAR_XPS_INTC_0_BASEADDR);
   XIntc_EnableIntr(XPAR_XPS_INTC_0_BASEADDR, 0x1);

   XTmrCtr_SetLoadReg(XPAR_XPS_TIMER_0_BASEADDR, 0, 333333);

   XTmrCtr_SetControlStatusReg(XPAR_XPS_TIMER_0_BASEADDR, 0, XTC_CSR_INT_OCCURED_MASK | XTC_CSR_LOAD_MASK );

   XIntc_EnableIntr(XPAR_XPS_TIMER_0_BASEADDR, XPAR_XPS_TIMER_0_INTERRUPT_MASK);

   XTmrCtr_SetControlStatusReg(XPAR_XPS_TIMER_0_BASEADDR, 0, XTC_CSR_ENABLE_TMR_MASK | XTC_CSR_ENABLE_INT_MASK |
  						XTC_CSR_AUTO_RELOAD_MASK | XTC_CSR_DOWN_COUNT_MASK);

   microblaze_enable_interrupts();

   xil_printf("-- Game Starts! --\r\n");
   xil_printf("\r\nPlayer 1's turn!\r\n");

   InitializeGame(x_cur, y_cur);

   while (1)
   {
	  do {
		  if (one_second_flag==1) {
			  DrawTime(88, EMPTY);
			  if (time>20)
				  DrawTime(30-time, CURSOR);
			  else
				  DrawTime(30-time, turn);
			  one_second_flag=0;
		  }
		  if (thirty_second_flag==1) {
			  thirty_second_flag==0;
		  }
		  dip_check=XGpio_DiscreteRead(&dip, 1);
	      StatusReg = XPs2_GetStatus(&Ps2Inst);
	  }while((StatusReg & XPS2_STATUS_RX_FULL) == 0);
	  BytesReceived = XPs2_Recv(&Ps2Inst, &RxBuffer, 1);
	  key_count=(key_count+1)%3;
	  if (key_count==1) {
		  if (RxBuffer==0x1D && win_flag==0) {
			  EraseCursor(x_cur, y_cur);
		      if (y_cur==0)
		    	  y_cur=14;
		      else
		    	  y_cur--;
		      DrawChess(x_cur, y_cur, CURSOR);
		  }
		  if (RxBuffer==0x1B && win_flag==0) {
		  	  EraseCursor(x_cur, y_cur);
		  	  if (y_cur==14)
		  	      y_cur=0;
		  	  else
		  	      y_cur++;
		  	  DrawChess(x_cur, y_cur, CURSOR);
		  }
		  if (RxBuffer==0x1C && win_flag==0) {
		  	  EraseCursor(x_cur, y_cur);
		  	  if (x_cur==0)
		  	      x_cur=14;
		  	  else
		  		  x_cur--;
		  	  DrawChess(x_cur, y_cur, CURSOR);
		  }
		  if (RxBuffer==0x23 && win_flag==0) {
		  	  EraseCursor(x_cur, y_cur);
		  	  if (x_cur==14)
		  	      x_cur=0;
		  	  else
		  		  x_cur++;
		  	  DrawChess(x_cur, y_cur, CURSOR);
		  }
		  if (RxBuffer==0x5A && win_flag==0) {
			  if (board_state[x_cur][y_cur]==2) {
				  DrawChess(x_cur, y_cur, turn);
				  board_state[x_cur][y_cur]=turn;
				  time=0;
				  if (CheckWin(x_cur,y_cur,turn)==1) {
					  xil_printf("\r\nPlayer %x wins!\r\n", turn+1);
					  DrawWinning(1, 13, EMPTY);
					  DrawWinning(1, 13, turn);
					  win_flag=1;
				  }
				  else {
					  if (turn==PLAYER1)
						  turn=PLAYER2;
					  else
						  turn=PLAYER1;
					  xil_printf("\r\nPlayer %x's turn!\r\n", turn+1);
				  }
			  }
		  }
		  if (RxBuffer==0x76) {
			  x_cur=7;
			  y_cur=7;
			  InitializeGame(x_cur, y_cur);
		  }
	  }
   }
}


